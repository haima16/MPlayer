import { EventHandle, PlayMode } from "../type";
import { EventBus } from "./eventbus";
interface IOptions {
    index?: number;
    fftSize?: number;
    volume?: number;
    cacheCount?: number;
    baseUrl?: string;
    request?: (options: IOptions) => ArrayBuffer;
    playermode?: PlayMode;
    autoplay?: boolean;
}
declare type PlayingState = 'suspended' | 'running';
export declare function createPlayer(resource: string | string[], options?: IOptions): Player;
declare class Player extends EventBus {
    private options;
    private playingState;
    private decodedData;
    private analyser;
    private urlList;
    private duration;
    private delta;
    private firstPlay;
    private ctx;
    private gain;
    private errorUrl;
    private source;
    private cache;
    onload: EventHandle;
    onended: EventHandle;
    oncatch: () => void;
    constructor(resource: string | string[], options?: IOptions);
    private initParams;
    private initSource;
    private initRequest;
    private request;
    private pushCache;
    private initDecode;
    private bindLoad;
    private bindEnded;
    private initAnalyser;
    private initBufferSource;
    private start;
    setUrlList(list: string[]): void;
    setOptions(options: IOptions): void;
    setVolume(val?: number): void;
    setPlayMode(playMode: PlayMode): void;
    playPrev(): void;
    playNext(): void;
    play(): void;
    play(offset: number): void;
    reset(): void;
    pause(): void;
    toggle(): void;
    getData(): Uint8Array;
    getCurrentTime(): number;
    getPlayingState(): PlayingState;
}
export {};
